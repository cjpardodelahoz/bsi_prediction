---
title: "BSI model with clinical data"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---

## Data preparation

### Compile patient and clinical data

We first need to assemble a table with all metadata available for each patient. I will focus on patients that had a single transplant.

```{r}
# Load required libraries and functions
suppressMessages(library(tidyverse))
source("code/rfunctions/data_helpers.r")

# Load all tables that contain patient metadata
tblhctmeta <- suppressMessages(read_csv("data/tblhctmeta.csv"))
sexSD <- suppressMessages(read_csv("data/sexSD.csv")) %>%
    distinct(cmicId, .keep_all = TRUE)

# Table with all patient metadata
patientmeta <- tblhctmeta %>%
    left_join(sexSD, by = c("PatientID" = "cmicId")) %>%
    select(PatientID, sex, Disease, TimepointOfTransplant, HCTSource, wbcPatientId, autoFmtPatientId, nejmPatientId)

# Filter patients with a single HCT
single_hct_patients <- tblhctmeta %>%
        group_by(PatientID) %>%
        filter(n() == 1) %>%
        pull(PatientID)

# Filter patient metadata to include only patients with a single HCT
patientmeta_single_hct <- patientmeta %>%
    filter(PatientID %in% single_hct_patients)
```

Now we will generate the table with patient-day observations from day -30 to +50 relative to the transplant:

```{r}
# Generate a sequence of days relative to transplant
days_relative_to_transplant <- -30:50

# Create a table with patient-day observations
tblpatientday <- expand.grid(
    PatientID = single_hct_patients,
    DayRelativeToNearestHCT = days_relative_to_transplant
) %>%
    arrange(PatientID, DayRelativeToNearestHCT)

# Display the first few rows of the table
head(tblpatientday)
```

Let's add the clinical metadata to to the patient-day table:

```{r}
# List of drugs to include
antibiotics <- c("glycopeptide antibiotics", "quinolones", "penicillins", "sulfonamides", "cephalosporins", "carbapenems")

# Pathogen groups
gutborne <- c("Enterococcus_Faecium_Vancomycin_Resistant",
                "Escherichia",
                "Klebsiella_Pneumoniae",
                "Enterobacter",
                "Candida",
                "Enterococcus_Faecium",
                "Enterococcus_Faecalis",
                "Klebsiella",
                "Enterococcus_Vancomycin_Resistant")
efaecium <- c("Enterococcus_Faecium_Vancomycin_Resistant",
                "Enterococcus_Faecium")
enterococcus <- c("Enterococcus_Faecium_Vancomycin_Resistant",
                "Enterococcus_Faecium",
                "Enterococcus_Faecalis",
                "Enterococcus_Vancomycin_Resistant")
klebsiella <- c("Klebsiella_Pneumoniae",
                "Klebsiella")
staph <- c("Coagulase_Negative_Staphylococcus", "Staphylococcus")

# Load and prepare clinical data
tbltemperature <- suppressMessages(read_csv("data/tbltemperature.csv")) %>%
    select(-Timepoint)
# Add a Status column to the filtered_wbc_data
engraftment_threshold <- 3
tblwbc <- suppressMessages(read_csv("data/tblwbc.csv")) %>%
    filter(PatientID %in% single_hct_patients & BloodCellType == "WBCtotal") %>%
    mutate(WBCtotal = as.numeric(str_replace(Value, "<0.1", "0"))) %>%
    group_by(PatientID) %>%
    arrange(DayRelativeToNearestHCT) %>%
    mutate(
        Status = case_when(
            WBCtotal < 0.5 & cumall(lag(WBCtotal, default = Inf) >= 0.5) & row_number() > 1 ~ "NeutropeniaStart",
            WBCtotal < 0.5 ~ "Neutropenia",
            TRUE ~ NA_character_
        )
    ) %>%
    mutate(
        Status = case_when(
            WBCtotal >= 0.5 & (purrr::map_lgl(row_number(), ~ any(Status[(.x + 1):n()] == "NeutropeniaStart")) | all(is.na(Status))) ~ "PreNeutropenia",
            DayRelativeToNearestHCT > 0 & purrr::map_lgl(row_number(), ~ all(WBCtotal[max(1, (.x - engraftment_threshold)):.x] >= 0.5)) 
            & lag(Status, (engraftment_threshold + 1), default = NA) %in% c("Neutropenia", "NeutropeniaStart") ~ "Engraftment",
            TRUE ~ Status
        )
    ) %>%
    mutate(
        Status = case_when(
            WBCtotal >= 0.5 & purrr::map_lgl(row_number(), ~ any(Status[1:(.x - 1)] == "Engraftment")) ~ "PostEngraftment",
            Status == "Neutropenia" & purrr::map_lgl(row_number(), ~ any(Status[1:(.x - 1)] == "Engraftment")) ~ "NeutropeniaPostEngraftment",
            WBCtotal >= 0.5 & purrr::map_lgl(row_number(), ~ any(Status[(.x + 1):(.x + engraftment_threshold)] == "Engraftment")) ~ "TransitionToEngraftment",
            TRUE ~ Status
        )
    ) %>%
    ungroup() %>%
    mutate(clinical_phase = case_when(
                Status == "PreNeutropenia" ~ "PreNeutropenia",
                Status %in% c("NeutropeniaStart", "Neutropenia", "TransitionToEngraftment") ~ "Neutropenia",
                Status %in% c("Engraftment", "PostEngraftment") ~ "PostEngraftment",
                TRUE ~ Status
    )) %>%
    select(PatientID, DayRelativeToNearestHCT, WBCtotal, Status, clinical_phase)
#tblwbc <- suppressMessages(read_csv("data/tblwbc.csv")) %>%
#    filter(BloodCellType == "WBCtotal") %>%
#    mutate(WBCtotal = as.numeric(str_replace(Value, "<0.1", "0"))) %>%
#    select(PatientID, DayRelativeToNearestHCT, WBCtotal)
tblmucositis <- suppressMessages(read_csv("data/mucositisSD.csv")) %>%
    filter(PatientID %in% unique(tblhctmeta$PatientID)) %>%
    rowwise() %>%
    mutate(DayRelativeToNearestHCT = calculate_day_relative_to_nearest_hct(PatientID, Timepoint, tblhctmeta)) %>%
    ungroup() %>%
    select(-Timepoint)
tbldrug <- suppressMessages(read_csv("data/tbldrug.csv")) %>%
    filter(Category %in% antibiotics) %>%
    rowwise() %>%
    mutate(DayRelativeToNearestHCT = list(StartDayRelativeToNearestHCT:StopDayRelativeToNearestHCT)) %>%
    unnest(DayRelativeToNearestHCT) %>%
    select(PatientID, Category, DayRelativeToNearestHCT) %>%
    distinct() %>%
    mutate(flag = 1) %>%
    pivot_wider(names_from = Category, values_from = flag, values_fill = 0)
tblinfections <- suppressMessages(read_csv("data/allinfectionsSD.csv")) %>%
    filter(PatientID %in% tblhctmeta$PatientID) %>%
    rowwise() %>%
    mutate(DayRelativeToNearestHCT = calculate_day_relative_to_nearest_hct(PatientID, Day, tblhctmeta)) %>%
    ungroup() %>%
    distinct() %>%
    mutate(flag = 1) %>%
    pivot_wider(names_from = InfectiousAgent, values_from = flag, values_fill = 0) %>%
    select(-Day) %>%
    mutate()

# Add clinical data to patient-day table
tblpatientday_clinical <- tblpatientday %>%
    left_join(tbltemperature,  by = c("PatientID", "DayRelativeToNearestHCT")) %>% # adding temperature
    left_join(tblwbc, by = c("PatientID", "DayRelativeToNearestHCT")) %>% # adding wbc counts
    left_join(tblmucositis, by = c("PatientID", "DayRelativeToNearestHCT")) %>% # adding mucositis data
    rename(mucositis_grade = grade) %>%
    left_join(tbldrug, by = c("PatientID", "DayRelativeToNearestHCT")) %>% # adding precomputed antibiotic flags
    mutate(across(all_of(antibiotics), ~replace_na(.x, 0))) %>% # fill missing antibiotic columns with 0s
    left_join(tblinfections, by = c("PatientID", "DayRelativeToNearestHCT")) %>% # Adding infections data
    mutate(across(all_of(colnames(tblinfections)[2:ncol(tblinfections)]), ~replace_na(.x, 0))) %>% # fill missing infections with 0s
    mutate(
        gutborne_infection = if_any(all_of(gutborne), ~ .x == 1),
        Enterococcus_faecium_infection = if_any(all_of(efaecium), ~ .x == 1),
        Enterococcus_infection = if_any(all_of(enterococcus), ~ .x == 1),
        Klebsiella_infection = if_any(all_of(klebsiella), ~ .x == 1),
        Staphylococcus_culture = if_any(all_of(staph), ~ .x == 1),
        Escherichia_infection = Escherichia,
        Candida_infection = Candida
    ) %>%
    mutate(across(ends_with("_infection"), as.integer)) %>% # Convert logical flags to integers
    mutate(DayRelativeToNearestHCT = factor(DayRelativeToNearestHCT), # Convert applicable variables to factors to treat them as categorical
            mucositis_grade = factor(mucositis_grade, levels = 0:4),
            across(all_of(antibiotics), ~ factor(.x, levels = 0:1)),
            Staphylococcus_culture = factor(Staphylococcus_culture)) %>%
    select(PatientID,
        DayRelativeToNearestHCT,
        MaxTemperature,
        WBCtotal,
        Status,
        clinical_phase,
        mucositis_grade,
        all_of(antibiotics),
        Staphylococcus_culture,
        ends_with("_infection"))

as_tibble(tblpatientday_clinical)

# Create the directory if it doesn't exist
if (!dir.exists("analyses/processed_data")) {
    dir.create("analyses/processed_data", recursive = TRUE)
}

# Save the tblpatientday_clinical object as an .RData file
save(tblpatientday_clinical, file = "analyses/processed_data/tblpatientday_clinical.RData")
```

Notice that some varialbles are not available for every day. We have to either delete those entries completely or extrapolate their value from the closest previous measurement before modeling. 

### Dealing with missing data

#### Strategy 1: Remove missing data

Here's a version after removing rows with missing data:

```{r}
tblpatientday_clinical_nm <- tblpatientday_clinical %>%
    drop_na()

as_tibble(tblpatientday_clinical_nm) # nm for no missing
```

Here's a summary of the number of data points for each day after removing missing data:

```{r}
# Summarize the number of data points for each DayRelativeToNearestHCT
day_summary <- tblpatientday_clinical_nm %>%
    group_by(DayRelativeToNearestHCT) %>%
    summarize(data_points = n(), .groups = "drop")

as_tibble(day_summary)
```

Based on this, I will only consider data points from day -9 to 30 when removing missing data.

```{r}
tblpatientday_clinical_nm <- tblpatientday_clinical_nm %>%
    filter(between(as.numeric(as.character(DayRelativeToNearestHCT)), -9, 30))
```

#### Strategy 2: Fill missing data by extrapolating from previous days

### Split into training and test subsets

I will split the data into training and testing subsets by sampling the patients instead of the individual data points. I will use 80% of the patients for training and 20% for testing:

```{r}
set.seed(1945) # For reproducibility

# Split patients into training and testing sets
patients_nm <- unique(tblpatientday_clinical_nm$PatientID)
train_patients_nm <- sample(patients_nm, size = floor(0.8 * length(patients_nm)))
test_patients_nm <- setdiff(patients_nm, train_patients_nm)

# Create training and testing datasets
train_data_nm <- tblpatientday_clinical_nm %>%
    filter(PatientID %in% train_patients_nm)

test_data_nm <- tblpatientday_clinical_nm %>%
    filter(PatientID %in% test_patients_nm)

# Calculate percent split of data points
percent_train <- (nrow(train_data_nm)/nrow(tblpatientday_clinical_nm))*100
percent_test <- (nrow(test_data_nm)/nrow(tblpatientday_clinical_nm))*100

as_tibble(train_data_nm)
as_tibble(test_data_nm)
```

This results in a split of `r percent_train`% training data points and `r percent_test`% testing points.

## Model fitting and evaluation

### Logistic model of *Enterococcus* infections

I will start by fitting a logistic regression that will aapproximate a discrete-time survival analysis by including the day relative to the transplant as a categorical predictor. This enables the calculation of odds ratios from the coefficients of other predictors that account for the time-variability in the risk of infection. By treating time as a categorical variable, the model can estimate the baseline hazard for each discrete time point without assuming a specific functional form for the hazard over time. This approach allows us to capture the dynamic nature of the risk of infection while simultaneously assessing the effects of other time-variable predictors (e.g., white blood cell counts, mucositis) on the odds of infection.

Let's model *Enterococcus* infections using white blood cell counts, mucositis, and body temperature as predictors. The ex

```{r}
# Fit logistic regression model with intercept (default)
logistic_model <- glm(
    Enterococcus_infection ~ WBCtotal + mucositis_grade + MaxTemperature + DayRelativeToNearestHCT,
    data = train_data_nm,
    family = binomial(link = "logit")
)

# Summary of the model
summary(logistic_model)
```

The estimated coefficients are qualitatively consistent with our expectations. Let's now evaluate the model performance using precision and recall on the test data.

```{r}
# Load required libraries
library(PRROC)

# Generate predicted probabilities for the test dataset
test_predictions_nm <- test_data_nm %>%
    mutate(predicted_prob = predict(logistic_model, newdata = test_data_nm, type = "response"))

# Generate Precision-Recall Curve
# Create a PRROC object
pr_curve <- pr.curve(
    scores.class0 = test_predictions_nm$predicted_prob[test_predictions_nm$Enterococcus_infection == 1],
    scores.class1 = test_predictions_nm$predicted_prob[test_predictions_nm$Enterococcus_infection == 0],
    curve = TRUE
)

# Extract precision and recall values from the pr_curve object
pr_data <- data.frame(
    Recall = pr_curve$curve[, 1],
    Precision = pr_curve$curve[, 2]
)

# Define a custom theme for plots
custom_theme <- theme(
    panel.grid = element_blank(),
    panel.background = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.75), 
    axis.text = element_text(color = "black", size = 10)
)

# Plot PR curve
ggplot(pr_data, aes(x = Recall, y = Precision)) +
    geom_line(color = "black", size = 1) +
    labs(
        title = "Precision-Recall Curve",
        x = "Recall",
        y = "Precision"
    ) +
    scale_x_continuous(limits = c(0, 1)) +
    scale_y_continuous(limits = c(0, 1)) +
    annotate(
        "text",
        x = 0.5,
        y = 0.8,
        label = paste("AUC-PR:", round(pr_curve$auc.integral, 3)),
        size = 6,
        hjust = 0.5
    ) +
    custom_theme

    # Extract precision, recall, and thresholds from the pr_curve object
    precision_recall_data <- data.frame(
        Threshold = pr_curve$curve[, 3],
        Precision = pr_curve$curve[, 2],
        Recall = pr_curve$curve[, 1]
    )

    # Plot precision and recall vs. threshold
    ggplot(precision_recall_data, aes(x = Threshold)) +
        geom_line(aes(y = Precision, color = "Precision"), size = 1) +
        geom_line(aes(y = Recall, color = "Recall"), size = 1) +
        labs(
            title = "Precision and Recall vs. Decision Threshold",
            x = "Decision Threshold",
            y = "Value"
        ) +
        scale_color_manual(
            name = "Metric",
            values = c("Precision" = "blue", "Recall" = "red")
        ) +
        scale_x_continuous(limits = c(0, 1)) +
        scale_y_continuous(limits = c(0, 1)) +
        custom_theme

        # Calculate precision and recall manually for each threshold
        thresholds <- seq(0, 1, by = 0.01)
        precision_recall_manual <- data.frame(Threshold = thresholds)

        precision_recall_manual <- precision_recall_manual %>%
            rowwise() %>%
            mutate(
                Precision = sum(test_predictions_nm$predicted_prob >= Threshold & test_predictions_nm$Enterococcus_infection == 1) /
                            sum(test_predictions_nm$predicted_prob >= Threshold),
                Recall = sum(test_predictions_nm$predicted_prob >= Threshold & test_predictions_nm$Enterococcus_infection == 1) /
                         sum(test_predictions_nm$Enterococcus_infection == 1)
            ) %>%
            ungroup() %>%
            replace_na(list(Precision = 0, Recall = 0)) # Replace NaN with 0 for cases with no predictions

        # Plot precision and recall vs. threshold
        ggplot(precision_recall_manual, aes(x = Threshold)) +
            geom_line(aes(y = Precision, color = "Precision"), size = 1) +
            geom_line(aes(y = Recall, color = "Recall"), size = 1) +
            labs(
                title = "Precision and Recall vs. Decision Threshold",
                x = "Decision Threshold",
                y = "Value"
            ) +
            scale_color_manual(
                name = "Metric",
                values = c("Precision" = "blue", "Recall" = "red")
            ) +
            scale_x_continuous(limits = c(0, 1)) +
            scale_y_continuous(limits = c(0, 1)) +
            custom_theme
```

```{r}
# Load required library
library(pROC)

# Compute ROC curve and AUC
roc_obj <- roc(test_predictions_nm$Enterococcus_infection, test_predictions_nm$predicted_prob)

# Plot ROC curve
plot(roc_obj, col = "blue", lwd = 2, main = "ROC Curve for Enterococcus Infection Prediction")
abline(a = 0, b = 1, lty = 2, col = "gray")

# Display AUC
auc_value <- auc(roc_obj)
cat("AUC:", auc_value, "\n")
```