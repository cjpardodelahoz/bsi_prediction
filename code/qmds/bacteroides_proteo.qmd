---
title: "Exploring *Bacteroides*-Proteobacteria association"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---

### Distribution of relative abundance in patients infected by *Enterococcus* vs *Escherichia*

```{r}
# Load required libraries and functions
suppressMessages(library(tidyverse))
source("code/rfunctions/data_helpers.r")

# Prepare genus-level counts and metadata for plotting
tblrel_genus_meta <- prep_taxa_counts("genus")

load("analyses/processed_data/tblpatientday_clinical.RData")

# Filter data for samples taken between DayRelativeToNearestHCT == 0 and DayRelativeToNearestHCT == 25
filtered_genus_meta <- tblrel_genus_meta %>%
  filter(DayRelativeToNearestHCT >= 0, DayRelativeToNearestHCT <= 25)

# Get the first infection day for Enterococcus and Escherichia for each patient
first_infection_days <- tblpatientday_clinical %>%
  mutate(DayRelativeToNearestHCT = as.numeric(as.character(DayRelativeToNearestHCT))) %>%
  group_by(PatientID) %>%
  summarise(
    Enterococcus_infection_day = ifelse(any(Enterococcus_infection == 1), 
                                        min(DayRelativeToNearestHCT[Enterococcus_infection == 1], na.rm = TRUE), 
                                        NA_real_),
    Escherichia_infection_day = ifelse(any(Escherichia_infection == 1), 
                                       min(DayRelativeToNearestHCT[Escherichia_infection == 1], na.rm = TRUE), 
                                       NA_real_),
    .groups = "drop"
  )

# Merge infection days with genus metadata
filtered_genus_meta <- filtered_genus_meta %>%
  left_join(first_infection_days, by = "PatientID")

# Filter data for each set
enterococcus_infected <- filtered_genus_meta %>%
  filter(!is.na(Enterococcus_infection_day), DayRelativeToNearestHCT <= Enterococcus_infection_day)

enterococcus_not_infected <- filtered_genus_meta %>%
  filter(is.na(Enterococcus_infection_day))

escherichia_infected <- filtered_genus_meta %>%
  filter(!is.na(Escherichia_infection_day), DayRelativeToNearestHCT <= Escherichia_infection_day)

escherichia_not_infected <- filtered_genus_meta %>%
  filter(is.na(Escherichia_infection_day))

# Combine Enterococcus data into a single data frame for plotting
enterococcus_combined <- bind_rows(
  enterococcus_infected %>% mutate(Group = "Infected with Enterococcus"),
  enterococcus_not_infected %>% mutate(Group = "Not infected with Enterococcus")
) %>%
  filter(`Enterococcus_abund` > 0)

# Create the density plot for Enterococcus
ggplot(enterococcus_combined, aes(x = Enterococcus_abund, fill = Group)) +
  geom_density(alpha = 0.6, linewidth = 0.2) +
  scale_fill_manual(values = c(
    "Infected with Enterococcus" = "#0D7E2B",
    "Not infected with Enterococcus" = "gray75"
  )) +
  labs(
    x = "Relative abundance of Enterococcus",
    y = "Density",
    fill = "Patient status"
  ) +
  custom_theme +
  theme(legend.position = c(0.5, 0.8))

# Save the plot
ggsave("document/plots/rel_density_enterococcus.pdf", width = 3.6, height = 3.6)

# Combine Escherichia data into a single data frame for plotting
escherichia_combined <- bind_rows(
  escherichia_infected %>% mutate(Group = "Infected with Escherichia"),
  escherichia_not_infected %>% mutate(Group = "Not infected with Escherichia")
)

# Filter out zeros for Escherichia abundance
escherichia_combined_filtered <- escherichia_combined %>%
  filter(`Escherichia-Shigella_abund` > 0.01)

# Create the density plot for Escherichia (excluding zeros)
ggplot(escherichia_combined_filtered, aes(x = `Escherichia-Shigella_abund`, fill = Group)) +
  geom_density(alpha = 0.6, linewidth = 0.2) +
  scale_fill_manual(values = c(
    "Infected with Escherichia" = "#EE2C2C",
    "Not infected with Escherichia" = "gray75"
  )) +
  labs(
    x = "Relative abundance of Escherichia",
    y = "Density",
    fill = "Patient status"
  ) +
  custom_theme +
  theme(legend.position = c(0.5, 0.8))

# Save the plot
ggsave("document/plots/rel_density_escherichia.pdf", width = 3.6, height = 3.6)
```

```{r}
# Filter samples for abundance > 0.01 and days between 0 and 25
scatter_data <- tblrel_genus_meta %>%
  filter(
    DayRelativeToNearestHCT >= 0, DayRelativeToNearestHCT <= 25,
    `Escherichia-Shigella_abund` > 0.01,
    Bacteroides_abund > 0.01
  )

# Make scatterplot stratified by Escherichia infection status
ggplot(scatter_data, aes(x = Bacteroides_abund, y = `Escherichia-Shigella_abund`, color = Escherichia_infection)) +
  geom_point(alpha = 0.7, size = 2) +
  scale_color_manual(values = c(`TRUE` = "#EE2C2C", `FALSE` = "gray60")) +
  labs(
    x = "Relative abundance of Bacteroides",
    y = "Relative abundance of Escherichia",
    color = "Escherichia infection") +
  custom_theme +
  theme(legend.position = c(0.7, 0.8))

ggsave("document/plots/rel_bacteroides_escherichia.pdf", width = 3.6, height = 3.6)
```

### Relative abundance dynamics of *Bacteroides* and pathogenic Proteobacteria

We are going to visualize the change in relative abundance of *Bacteroides* and pathogenic Proteobacteria over time in the allo-HCT patient dataset. We want to determine if the dynamics are different in patients that suffered infections by the Proteobacteria compared to patients who did not get infected. For pathogens, we already expect their abundance increases and we are mostly replicating some of the results of Liao et al, 2021.

```{r}
# Plot the average relative abundance of Escherichia over time, grouped by infection status
tblrel_genus_meta %>%
  filter(!is.na(DayRelativeToNearestHCT), DayRelativeToNearestHCT >= -10, DayRelativeToNearestHCT <= 30) %>%
  group_by(DayRelativeToNearestHCT, Escherichia_infection) %>%
  summarise(avg_abundance = mean(`Escherichia-Shigella_abund`, na.rm = TRUE), .groups = "drop") %>%
  ggplot(aes(x = DayRelativeToNearestHCT, y = avg_abundance, color = Escherichia_infection)) +
  geom_line(linewidth = 1) +
  scale_color_manual(values = c(`TRUE` = "#EE2C2C", `FALSE` = "gray60")) +
  labs(
  title = "Average relative abundance of escherichia over time",
   x = "Days Relative to Nearest HCT",
   y = "Average Relative Abundance of Escherichia",
   color = "Escherichia infection"
  ) +
  custom_theme +
  scale_y_continuous(limits = c(0, 1))    
    
# Plot the average relative abundance of Bacteroides over time, grouped by infection status
tblrel_genus_meta %>%
  filter(!is.na(DayRelativeToNearestHCT), DayRelativeToNearestHCT >= -15, DayRelativeToNearestHCT <= 30) %>%
  group_by(DayRelativeToNearestHCT, Escherichia_infection) %>%
  summarise(avg_abundance = mean(Bacteroides_abund, na.rm = TRUE), .groups = "drop") %>%
  ggplot(aes(x = DayRelativeToNearestHCT, y = avg_abundance, color = Escherichia_infection)) +
  geom_line(linewidth = 1) +
  scale_color_manual(values = c(`TRUE` = "#EE2C2C", `FALSE` = "gray60")) +
  labs(
   title = "Average Relative Abundance of Bacteroides",
   x = "Days Relative to Nearest HCT",
   y = "Average relative abundance of Bacteroides over time",
   color = "Escherichia infection"
      ) +
  custom_theme +
  scale_y_continuous(limits = c(0, 0.25))

# Plot the average relative abundance of Bacteroides over time, grouped by infection status -- including SEs
tblrel_genus_meta %>%
  filter(!is.na(DayRelativeToNearestHCT), DayRelativeToNearestHCT >= -10, DayRelativeToNearestHCT <= 25) %>%
  group_by(DayRelativeToNearestHCT, Escherichia_infection) %>%
  summarise(
    avg_abundance = mean(Bacteroides_abund, na.rm = TRUE),
    n = sum(!is.na(Bacteroides_abund)),
    se = ifelse(n > 1, sd(Bacteroides_abund, na.rm = TRUE) / sqrt(n), NA_real_),
    .groups = "drop"
  ) %>%
  filter(!is.na(se)) %>%
  ggplot(aes(x = DayRelativeToNearestHCT, y = avg_abundance, color = Escherichia_infection, fill = Escherichia_infection)) +
  geom_ribbon(aes(ymin = avg_abundance - se, ymax = avg_abundance + se), alpha = 0.2, color = NA) +
  geom_line(linewidth = 1) +
  scale_color_manual(values = c(`TRUE` = "#EE2C2C", `FALSE` = "gray60")) +
  scale_fill_manual(values = c(`TRUE` = "#EE2C2C", `FALSE` = "gray60")) +
  labs(
    title = "Average Relative Abundance of Bacteroides",
    x = "Days Relative to Nearest HCT",
    y = "Average relative abundance of Bacteroides over time",
    color = "Escherichia infection",
    fill = "Escherichia infection"
  ) +
  custom_theme +
  scale_y_continuous(limits = c(0, 0.25))
```

After zooming-in and looking at the variation around the average relative abundance of *Bacteroides*, there seem to be some differences in the dynamic behavior between infected and non-infected patients, although the relative abundance estimates in infected patients are very noisy. I first tested this using a linear model:

```{r}
bacteroides_lm <- lm(Bacteroides_abund ~
  Escherichia_infection + factor(DayRelativeToNearestHCT),
  data = filter(tblrel_genus_meta, between(DayRelativeToNearestHCT, -10, 25)))
summary(bacteroides_lm)
```

which has a significant positive coefficient. But the significance is lost once I use a linear mixed effects model to account for within-patient variation:

```{r}
library(lme4)
bacteroides_lmm <- lmer(Escherichia_infection ~
  Bacteroides_abund+ factor(DayRelativeToNearestHCT) + (1|PatientID),
  data = filter(tblrel_genus_meta, between(DayRelativeToNearestHCT, -10, 25)))
summary(bacteroides_lmm)
```

This could be due to high within-patient variation relative to the effect size and low number of samples for each patient.

### Quantifying association between Bacteroides and Escherichia abundance and infection risk

I tried different strategies to formally quantify the risk of BSI using the abundance of *Bacteroides* as a predictor.

#### Case-control matching dataset

I wanted to explicitly test if the relative abundance of *Bacteroides* was associated with a higher risk of BSI by *E. coli*. To do this, I created a matched case-control data set: case samples were the stool samples closest in time prior to a BSI event; controls were samples from patients without recorded BSI event chosen such that the patient's sex and the clinical phase of the HCT therapy during which a sample was collected matched; I chose 4 controls for every case sample.

```{r}
# Load table with all ASV data
tblrel_asv_meta <- prep_taxa_counts("asv")

# Load the patient-day clinical dataset
load("analyses/processed_data/tblpatientday_clinical.RData")
tblpatientday_clinical$DayRelativeToNearestHCT <- as.numeric(as.character(tblpatientday_clinical$DayRelativeToNearestHCT)) # Day as numeric

# Find the day of first Escherichia infection for each patient
first_ecoli_infection <- tblpatientday_clinical %>%
  filter(Escherichia_infection == 1) %>%
  group_by(PatientID) %>%
  summarise(infection_day = min(DayRelativeToNearestHCT), .groups = "drop")

# For each infected patient, find the SampleID in tblrel_filtered_asv with DayRelativeToNearestHCT closest to infection_day
closest_samples <- tblrel_asv_meta %>%
  inner_join(first_ecoli_infection, by = "PatientID") %>%
  mutate(day_diff = infection_day - DayRelativeToNearestHCT) %>%
  filter(day_diff >= 0) %>%  # Only keep samples before or on infection day
  group_by(PatientID) %>%
  slice_min(order_by = day_diff, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  select(PatientID, Sample, DayRelativeToNearestHCT, infection_day, day_diff) %>%
  filter(day_diff <= 7) %>%
  left_join(select(tblpatientday_clinical, PatientID, DayRelativeToNearestHCT, clinical_phase, sex), by = c("PatientID", "DayRelativeToNearestHCT"))

# Set clinical_phase to "Neutropenia" for Sample 2121F
closest_samples$clinical_phase[closest_samples$Sample == "2121F"] <- "Neutropenia"

# Get PatientIDs of infected patients to exclude them from controls
infected_patients <- unique(closest_samples$PatientID)

# Prepare uninfected samples with clinical_phase and sex info
uninfected_samples <- tblrel_asv_meta %>%
  left_join(tblpatientday_clinical %>% select(PatientID, DayRelativeToNearestHCT, clinical_phase, sex), 
            by = c("PatientID", "DayRelativeToNearestHCT")) %>%
  filter(
    Escherichia_infection == FALSE,
    !PatientID %in% infected_patients
  )

# For each sample in closest_samples, randomly select 4 matched controls by clinical_phase
set.seed(1830)
matched_case_controls <- closest_samples %>%
  rowwise() %>%
  mutate(
    control_samples = list({
      phase <- clinical_phase
      sex_ref <- sex
      uninfected_samples %>%
        filter(clinical_phase == phase, sex == sex_ref) %>%
        sample_n(size = min(4, n()), replace = FALSE) %>%
        select(PatientID, Sample, DayRelativeToNearestHCT, clinical_phase, sex)
    })
  ) %>%
  unnest(control_samples, names_sep = "_control") %>%
  ungroup()

# Create matched_case_control dataset
case_control_data <- bind_rows(
  closest_samples %>%
    mutate(BSI = TRUE) %>%
    select(PatientID, Sample, DayRelativeToNearestHCT, clinical_phase, BSI),
  matched_case_controls %>%
    mutate(BSI = FALSE) %>%
     select(PatientID = control_samples_controlPatientID, 
           Sample = control_samples_controlSample, 
             DayRelativeToNearestHCT = control_samples_controlDayRelativeToNearestHCT, 
             clinical_phase = control_samples_controlclinical_phase, 
             BSI)
  ) %>%
  left_join(tblrel_asv_meta, by = c("PatientID", "Sample"))
```

I then prepared a version of the dataset where I split the merged the relative abundances of ASVs in three groups:

  - *Bacteroides s. lat*: all ASVs classified as *Bacteroides* in the original dataset, which includes both *Bacteroides* and *Phocaeicola* species.
  - *Bacteroides s. str.*: All ASVs classified as *Bacteroides* after removing the ones that matched full 16S sequences of *Phocaeicola*.
  - *Phocaeicola*: All ASVs that matched full 16S sequences of *Phocaeicola*, plus ASV_6242, which was the only one originally classified as *Phocaeicola*.

```{r}
# Define the ASVs in each group_by
bacteroides_slat_asvs <- asv_species_summary %>%
  pull(asv)
bacteroides_sstr_asvs <- asv_species_summary %>%
  filter(!str_detect(species, "Phocaeicola") & mismatches <= 1) %>%
  pull(asv)
phocaeicola_asvs <- c(
  asv_species_summary %>%
    filter(str_detect(species, "Phocaeicola") & mismatches <= 1) %>%
    pull(asv), 
  "ASV_6242")

# Add up the relative abundances by species groups
case_control_data_merged_asvs <- case_control_data %>%
  mutate(
    Bacteroides_s_lat = {
      cols <- intersect(paste0(bacteroides_slat_asvs, "_abund"), names(.))
      if (length(cols) > 0) rowSums(select(., all_of(cols)), na.rm = TRUE) else 0
    },
    Bacteroides_s_str = {
      cols <- intersect(paste0(bacteroides_sstr_asvs, "_abund"), names(.))
      if (length(cols) > 0) rowSums(select(., all_of(cols)), na.rm = TRUE) else 0
    },
    Phocaeicola = {
      cols <- intersect(paste0(phocaeicola_asvs, "_abund"), names(.))
      if (length(cols) > 0) rowSums(select(., all_of(cols)), na.rm = TRUE) else 0
    }
  )
```

#### Logistic regression on case-control matched dataset

Then, I fitted a logistic regression, which showed a significantly positive association between *Bacteroides s. lat* abundance and the risk of BSI:

```{r}
# Logistic regression - merged
case_control_bsi_merged_glm <- glm(BSI ~ log10(Bacteroides_s_lat+0.000001), data = case_control_data_merged_asvs, family = binomial)
summary(case_control_bsi_merged_glm)
```

I tested whether the relative abundance of *Bacteroides* between infected and non-infected patients is significantly different using a Wilcoxon rank-sum test:

```{r}
# Wilcoxon rank-sum test for Bacteroides sensu lato abundance between infected and non-infected patients
wilcox.test(
  log10(Bacteroides_s_lat + 0.000001) ~ BSI,
  data = case_control_data_merged_asvs
)
```

The difference is significant, so I plotted the log-trasnformed relative abundance of *Bacteroides* in infected vs. non-infected patients:

```{r}
# Boxplot comparing Bacteroides between BSI and non-BSI samples
ggplot(case_control_data_merged_asvs, 
  aes(x = factor(BSI, levels = c(FALSE, TRUE), 
       labels = c("No", "Yes")),
      y = log10(Bacteroides_s_lat + 0.000001))) +
  geom_boxplot(fill = "#ebe4d1", outlier.shape = NA, alpha = 0.6) +
  geom_jitter(aes(color = factor(BSI, levels = c(FALSE, TRUE))), 
    width = 0.2, alpha = 0.8, size = 1.2, shape = 16) +
  scale_color_manual(values = c("black", "#EE2C2C")) +
  labs(
    x = "E. coli BSI",
    y = expression(Log[10]*" relative abundance of Bacteroides s. lat."),
    color = "BSI"
  ) +
  custom_theme +
  theme(
    panel.border = element_blank(),
    axis.line.x.bottom = element_line(color = "black", linewidth = 0.5),
    axis.line.y.left = element_line(color = "black", linewidth = 0.5),
    axis.line = element_line(),
    axis.ticks = element_line(color = "black"),
    legend.position = "none"
  ) +
  annotate("segment", x = 1, xend = 2, y = 0.1, yend = 0.1, linewidth = 0.5) +
  annotate("text", x = 1.5, y = 0.11, label = "*", size = 6, vjust = 0) +
  scale_y_continuous(limits = c(NA, 0.2))

# Save the plot
ggsave("document/plots/bacteroides_rel_bsi.pdf",
        width = 2, height = 4)
```

#### Lasso regression on *Bacteroides s. lat.* ASVs

Then I conducted a L1-penalized logistic regression (lasso) correlating the binary outcome (BSI) with log10-transformed relative ASV abundances across *Bacteroides s. lat.*, which found two ASVs with non-0 coefficients:

```{r}
library(glmnet)

# Prepare the matrix of log10-transformed ASV abundances for Bacteroides s. lat.
asv_abund_cols <- paste0(bacteroides_slat_asvs, "_abund")
asv_abund_cols <- intersect(asv_abund_cols, colnames(case_control_data)) # ensure columns exist

# Log10-transform with pseudocount
X <- as.matrix(log10(case_control_data[, asv_abund_cols, drop = FALSE] + 0.000001))
rownames(X) <- case_control_data$Sample
X[is.na(X)] <- 0  # Optionally impute NAs as 0

y <- as.numeric(case_control_data$BSI) # 0/1 outcome

# Fit lasso with cross-validation
lasso_fit <- cv.glmnet(X, y, family = "binomial", alpha = 1, standardize = TRUE)

# Extract coefficients at the best lambda
lasso_coefs <- coef(lasso_fit, s = "lambda.min")
selected_asvs <- rownames(lasso_coefs)[which(lasso_coefs != 0)]
selected_asvs
```

#### Bayesian logistic regression

For the ASVs identified with the lasso regression, I performed a Bayesian logistic regression using the matched cases-control data 

```{r}
# Bayesian logistic regression using brms
library(brms)
library(BH)

# Set priors: normal(0, 1) for coefficients, normal(-1.38, 0.01) for intercept
priors <- c(
  set_prior("normal(0, 5)", class = "Intercept"),
  set_prior("normal(0, 5)", class = "b")
)

# Fit the model
case_control_bsi_brm <- brm(
  BSI ~ log10(ASV_277_abund + 0.000001) + log10(ASV_94_abund + 0.000001),
  data = case_control_data_merged_asvs,
  family = bernoulli(link = "logit"),
  prior = priors,
  chains = 4, iter = 10000, warmup = 1000, seed = 1830
)

# Summarize results
summary(case_control_bsi_brm)
```

Then, I plotted the posterior distributions of the estimates:

```{r}
# Extract posterior draws for coefficients
posterior <- as.data.frame(as_draws_df(case_control_bsi_brm))
asv_names <- c("ASV_277" = "b_log10ASV_277_abundP1eM06", "ASV_94" = "b_log10ASV_94_abundP1eM06")

# Compute medians and HDIs for each ASV
get_hdi <- function(x, prob) {
  x <- sort(x)
  n <- length(x)
  ci_idx <- floor(prob * n)
  width <- x[(ci_idx + 1):n] - x[1:(n - ci_idx)]
  min_idx <- which.min(width)
  c(lower = x[min_idx], upper = x[min_idx + ci_idx])
}

# Generate a summary data frame of posterior draws for each ASV.
summary_df <- do.call(rbind, lapply(names(asv_names), function(asv) {
  draws <- posterior[[asv_names[asv]]]
  med <- median(draws)
  hdi50 <- get_hdi(draws, 0.5)
  hdi95 <- get_hdi(draws, 0.95)
  data.frame(
    ASV = asv,
    median = med,
    hdi50_lower = hdi50[1],
    hdi50_upper = hdi50[2],
    hdi95_lower = hdi95[1],
    hdi95_upper = hdi95[2]
  )
}))

# Define species labels
right_labels <- c("Bacteroides fragilis", "Bacteroides xylanisolvens")
names(right_labels) <- c("ASV_277", "ASV_94")

# ASVs as factor
summary_df$ASV <- factor(summary_df$ASV, levels = rev(names(asv_names)))

# Plot: HDI95 as whiskers, HDI50 as box, median as point
ggplot(summary_df, aes(y = ASV, x = median)) +
  # HDI95 whiskers
  geom_errorbarh(aes(xmin = hdi95_lower, xmax = hdi95_upper), height = 0.18, size = 1, color = "#EE2C2C") +
  # HDI50 box
  geom_rect(aes(xmin = hdi50_lower, xmax = hdi50_upper,
                ymin = as.numeric(ASV) - 0.18, ymax = as.numeric(ASV) + 0.18, fill = ASV),
            alpha = 1, color = NA) +
  # Median point
  geom_point(size = 3, color = "white") +
  # Dashed vertical line at x = 0
  geom_vline(xintercept = 0, linetype = "dashed", color = "gray40", linewidth = 0.7) +
  scale_y_discrete(
    limits = levels(summary_df$ASV),
    labels = function(x) x  # keep left axis as ASV names
  ) +
  scale_fill_manual(values = c("ASV_277" = "#EE2C2C", "ASV_94" = "#EE2C2C")) +
  labs(
    x = expression("Log odds of E. coli BSI per unit increase of log"["10"]*" relative ASV abundance"),
    y = NULL
  ) +
  custom_theme +
  scale_x_continuous(limits = c(-0.2, 1.2), breaks = seq(-0.2, 1.2, by = 0.2)) +
  theme(
    legend.position = "none",
    panel.border = element_blank(),
    axis.line.x.bottom = element_line(color = "black", linewidth = 0.5),
    axis.line.y.right = element_blank(),
    axis.ticks.y.right = element_blank(),
    axis.text.y.right = element_text(margin = margin(l = 7))
  ) +
  # Add right-side labels using annotate
  annotate(
    "text",
    x = 0.75, # right edge of plot
    y = seq_along(right_labels),
    label = right_labels[levels(summary_df$ASV)],
    hjust = 0,
    vjust = 0.5,
    size = 4,
    fontface = "italic"
  )

# Save the plot
ggsave("document/plots/bayes_logit_bsi_bacteroides_asvs.pdf",
        height = 1.5, width = 8)
```