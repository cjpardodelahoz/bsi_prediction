---
title: "BSI model with clinical data"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---

## Data preparation

### Compile patient and clinical data

We first need to assemble a table with all metadata available for each patient. I will focus on patients that had a single transplant.

```{r}
# Load required library
suppressMessages(library(tidyverse))

# Load all tables that contain patient metadata
tblhctmeta <- suppressMessages(read_csv("data/tblhctmeta.csv"))
sexSD <- suppressMessages(read_csv("data/sexSD.csv")) %>%
    distinct(cmicId, .keep_all = TRUE)

# Table with all patient metadata
patientmeta <- tblhctmeta %>%
    left_join(sexSD, by = c("PatientID" = "cmicId")) %>%
    select(PatientID, sex, Disease, TimepointOfTransplant, HCTSource, wbcPatientId, autoFmtPatientId, nejmPatientId)

# Filter patients with a single HCT
single_hct_patients <- tblhctmeta %>%
        group_by(PatientID) %>%
        filter(n() == 1) %>%
        pull(PatientID)

# Filter patient metadata to include only patients with a single HCT
patientmeta_single_hct <- patientmeta %>%
    filter(PatientID %in% single_hct_patients)
```

Now we will generate the table with patient-day observations from day -30 to +50 relative to the transplant:

```{r}
# Generate a sequence of days relative to transplant
days_relative_to_transplant <- -30:50

# Create a table with patient-day observations
tblpatientday <- expand.grid(
    PatientID = single_hct_patients,
    DayRelativeToNearestHCT = days_relative_to_transplant
) %>%
    arrange(PatientID, DayRelativeToNearestHCT)

# Display the first few rows of the table
head(tblpatientday)
```

Let's add the clinical metadata to to the patient-day table:

```{r}
# Function to calculate DayRelativeToNearestHCT for infections data
calculate_day_relative_to_nearest_hct <- function(patient_id, event_day, hct_meta) {
    patient_hcts <- hct_meta %>%
        filter(PatientID == patient_id) %>%
        pull(TimepointOfTransplant)
    nearest_hct <- patient_hcts[which.min(abs(event_day - patient_hcts))]
    event_day - nearest_hct
}

# List of drugs to include
antibiotics <- c("glycopeptide antibiotics", "quinolones", "penicillins", "sulfonamides", "cephalosporins", "carbapenems")

# Pathogen groups
gutborne <- c("Enterococcus_Faecium_Vancomycin_Resistant",
                "Escherichia",
                "Klebsiella_Pneumoniae",
                "Enterobacter",
                "Candida",
                "Enterococcus_Faecium",
                "Enterococcus_Faecalis",
                "Klebsiella",
                "Enterococcus_Vancomycin_Resistant")
efaecium <- c("Enterococcus_Faecium_Vancomycin_Resistant",
                "Enterococcus_Faecium")
enterococcus <- c("Enterococcus_Faecium_Vancomycin_Resistant",
                "Enterococcus_Faecium",
                "Enterococcus_Faecalis",
                "Enterococcus_Vancomycin_Resistant")
klebsiella <- c("Klebsiella_Pneumoniae",
                "Klebsiella")
staph <- c("Coagulase_Negative_Staphylococcus", "Staphylococcus")

# Load and prepare clinical data
tbltemperature <- suppressMessages(read_csv("data/tbltemperature.csv")) %>%
    select(-Timepoint)
tblwbc <- suppressMessages(read_csv("data/tblwbc.csv")) %>%
    filter(BloodCellType == "WBCtotal") %>%
    mutate(WBCtotal = as.numeric(str_replace(Value, "<0.1", "0"))) %>%
    select(PatientID, DayRelativeToNearestHCT, WBCtotal)
tblmucositis <- suppressMessages(read_csv("data/mucositisSD.csv")) %>%
    filter(PatientID %in% unique(tblhctmeta$PatientID)) %>%
    rowwise() %>%
    mutate(DayRelativeToNearestHCT = calculate_day_relative_to_nearest_hct(PatientID, Timepoint, tblhctmeta)) %>%
    ungroup() %>%
    select(-Timepoint)
tbldrug <- suppressMessages(read_csv("data/tbldrug.csv")) %>%
    filter(Category %in% antibiotics) %>%
    rowwise() %>%
    mutate(DayRelativeToNearestHCT = list(StartDayRelativeToNearestHCT:StopDayRelativeToNearestHCT)) %>%
    unnest(DayRelativeToNearestHCT) %>%
    select(PatientID, Category, DayRelativeToNearestHCT) %>%
    distinct() %>%
    mutate(flag = 1) %>%
    pivot_wider(names_from = Category, values_from = flag, values_fill = 0)
tblinfections <- suppressMessages(read_csv("data/allinfectionsSD.csv")) %>%
    filter(PatientID %in% tblhctmeta$PatientID) %>%
    rowwise() %>%
    mutate(DayRelativeToNearestHCT = calculate_day_relative_to_nearest_hct(PatientID, Day, tblhctmeta)) %>%
    ungroup() %>%
    distinct() %>%
    mutate(flag = 1) %>%
    pivot_wider(names_from = InfectiousAgent, values_from = flag, values_fill = 0) %>%
    select(-Day) %>%
    mutate()

# Add clinical data to patient-day table
tblpatientday_clinical <- tblpatientday %>%
    left_join(tbltemperature,  by = c("PatientID", "DayRelativeToNearestHCT")) %>% # adding temperature
    left_join(tblwbc, by = c("PatientID", "DayRelativeToNearestHCT")) %>% # adding wbc counts
    left_join(tblmucositis, by = c("PatientID", "DayRelativeToNearestHCT")) %>% # adding mucositis data
    rename(mucositis_grade = grade) %>%
    left_join(tbldrug, by = c("PatientID", "DayRelativeToNearestHCT")) %>% # adding precomputed antibiotic flags
    mutate(across(all_of(antibiotics), ~replace_na(.x, 0))) %>% # fill missing antibiotic columns with 0s
    left_join(tblinfections, by = c("PatientID", "DayRelativeToNearestHCT")) %>% # Adding infections data
    mutate(across(all_of(colnames(tblinfections)[2:ncol(tblinfections)]), ~replace_na(.x, 0))) %>% # fill missing infections with 0s
    mutate(
        gutborne_infection = if_any(all_of(gutborne), ~ .x == 1),
        Enterococcus_faecium_infection = if_any(all_of(efaecium), ~ .x == 1),
        Enterococcus_infection = if_any(all_of(enterococcus), ~ .x == 1),
        Klebsiella_infection = if_any(all_of(klebsiella), ~ .x == 1),
        Staphylococcus_culture = if_any(all_of(staph), ~ .x == 1),
        Escherichia_infection = Escherichia,
        Candida_infection = Candida
    ) %>%
    mutate(across(ends_with("_infection"), as.integer), # Convert logical flags to integers
            across(c("DayRelativeToNearestHCT",
                "mucositis_grade",
                all_of(antibiotics),
                Staphylococcus_culture
                ), as.character)) %>% # Convert applicable variables to character
    select(PatientID,
        DayRelativeToNearestHCT,
        MaxTemperature,
        WBCtotal,
        mucositis_grade,
        all_of(antibiotics),
        Staphylococcus_culture,
        ends_with("_infection"))

as_tibble(tblpatientday_clinical)
```

Notice that some varialbles are not available for every day. We have to either delete those entries completely or extrapolate their value from the closest previous measurement before modeling. 

### Dealing with missing data

#### Strategy 1: Remove missing data

Here's a version after removing rows with missing data:

```{r}
tblpatientday_clinical_nomissing <- tblpatientday_clinical %>%
    drop_na()

as_tibble(tblpatientday_clinical_nomissing)
```

Here's a summary of the number of data points for each day after removing missing data:

```{r}
# Summarize the number of data points for each DayRelativeToNearestHCT
day_summary <- tblpatientday_clinical_nomissing %>%
    group_by(DayRelativeToNearestHCT) %>%
    summarize(data_points = n(), .groups = "drop")

as_tibble(day_summary)
```

Based on this, I will only consider data points from day -9 to 30 when removing missing data.

```{r}
tblpatientday_clinical_nomissing <- tblpatientday_clinical_nomissing %>%
    filter(between(as.numeric(DayRelativeToNearestHCT), -9, 30)) 
```

#### Strategy 2: Fill missing data by extrapolating from previous days

### Split into training and test subsets

## Model fitting