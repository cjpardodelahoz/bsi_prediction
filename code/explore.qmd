---
title: "Exploring clinical and microbiome data from allo-HCT patients (Liao et al 2021)"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---

This is my initial exploration of the data from Liao et al 2021. Remember that the `data/` directory is a symbolic link to the Xavier lab shared drive.

```{r}
# Load libraries
library(tidyverse, quietly = TRUE)
```

## Clinical data

### Transplant metadata

We first explored the transplant metadata:

```{r}
# EXPLORING TRANSPLANT METADATA

tblhctmeta <- read_csv("data/tblhctmeta.csv")
head(tblhctmeta)

# Total number of patients
n_patients <- tblhctmeta$PatientID %>% unique() %>% length()

# Patients with 1 HCTS
n_patients_1hct <- tblhctmeta %>% 
    group_by(PatientID) %>% 
    filter(n() == 1) %>% 
    pull(PatientID) %>% 
    unique() %>%
    length()

# Patients with 2 HCTs
n_patients_2hct <- tblhctmeta %>% 
    group_by(PatientID) %>% 
    filter(n() == 2) %>% 
    pull(PatientID) %>% 
    unique() %>%
    length()

# Patients with 3 HCTs
n_patients_3hct <- tblhctmeta %>% 
    group_by(PatientID) %>% 
    filter(n() == 3) %>% 
    pull(PatientID) %>% 
    unique() %>%
    length()

# Calculate the time differences for patients with more than 1 HCT
time_diffs <- tblhctmeta %>%
    group_by(PatientID) %>%
    filter(n() > 1) %>%
    arrange(PatientID, TimepointOfTransplant) %>%
    mutate(time_diff = TimepointOfTransplant - lag(TimepointOfTransplant)) %>%
    filter(!is.na(time_diff)) %>%
    pull(time_diff)

# Minimum, median, and maximum time differences
min_time_diff <- min(time_diffs)
median_time_diff <- median(time_diffs)
max_time_diff <- max(time_diffs)

# EXPLORING DISEASE DATA

# Filter the dataset to only consider one record for each patient
unique_patients <- tblhctmeta %>%
    group_by(PatientID) %>%
    slice(1) %>%
    ungroup()

# Define a custom theme for plots
custom_theme <- theme(
    panel.grid = element_blank(),
    panel.background = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, linewidth = 0.75), 
    axis.text = element_text(color = "black", size = 10)
)

# Create a bar plot showing the frequency of each disease
disease_plot <- unique_patients %>%
    filter(!is.na(Disease)) %>%
    count(Disease) %>%
    ggplot(aes(x = reorder(Disease, -n), y = n)) +
    geom_bar(stat = "identity") +
    geom_text(aes(label = n), vjust = -0.5) +
    ylim(0, 700) +
    labs(x = "Disease",
         y = "Frequency") +
    custom_theme +
    theme(axis.text.x = element_text(angle = 90, hjust = 1))

# EXPLORING TRANSPLANT SOURCE

# Create a bar plot showing the frequency of each HCT source
hct_source_plot <- unique_patients %>%
    filter(!is.na(HCTSource)) %>%
    count(HCTSource) %>%
    ggplot(aes(x = reorder(HCTSource, -n), y = n)) +
    geom_bar(stat = "identity") +
    geom_text(aes(label = n), vjust = -0.5) +
    ylim(0, 550) +
    labs(x = "HCT Source",
         y = "Frequency") +
    scale_x_discrete(labels = c("TCD" = "T-Cell depleted", 
                                "PBSC_unmodified" = "Peripheral blood stem cells", 
                                "cord" = "Cord blood", 
                                "BM_unmodified" = "Bone marrow")) +
    custom_theme +
    theme(axis.text.x = element_text(angle = 90, hjust = 1))

# EXPLORING CROSS-STUDY LINKS

# How many patients of these patients were included in previous studies?
n_patients_na_wbc <- tblhctmeta %>%
    filter(!is.na(wbcPatientId)) %>%
    pull(PatientID) %>%
    unique() %>%
    length()
n_patients_na_fmt <- tblhctmeta %>%
    filter(is.na(autoFmtPatientId)) %>%
    pull(PatientID) %>%
    unique() %>%
    length()
n_patients_na_nejm <- tblhctmeta$nejmPatientId %>% sum()
```

This table contains data for HCTs in `r n_patients` patients. Of those, `r n_patients_1hct` received 1 HCT, `r n_patients_2hct` received 2 HCTs, and `r n_patients_3hct` received 3 HCTs. The minimum time between two HCTs for the same patient was `r min_time_diff` days, the maximum was `r max_time_diff` days, and the median was `r median_time_diff` days.

The most commonm disease among these patients was Leukemia, with `r unique_patients %>% filter(Disease == "Leukemia") %>% pull() %>% length()` cases. Here's the frequency distribution of all diseases: 

```{r}
print(disease_plot)
```

The most common source for the HCT was T-Cell depleted, used in `r unique_patients %>% filter(HCTSource == "TCD") %>% pull() %>% length()` transplants. Here's the freqeuncy distribution of the transplant sources:

```{r}
print(hct_source_plot)
```

Finally, all `r n_patients_na_wbc` patients were included in a [previous study on the role of the microbiota in  white blood cell dynamics](https://doi.org/10.1038/s41586-020-2971-8); `r n_patients_na_fmt` of the patients were included in a [previous study describing an autologous faecal microbiota trial](https://doi.org/10.1126/scitranslmed.aap9489); and `r n_patients_na_nejm` of the patients were part of a [previous study linking microbiome diversity to mortality during HCT](https://www.nejm.org/doi/full/10.1056/NEJMoa1900623).
 
***Issues to check***

- Some patients have NA in the Disease column for one of the HCT records even when another record specified a diseaseâ€“-why?

- What is the actual source for the TCD cases?

### Anti-infective drug metadata

Then we looked at the data on anti-infective drug administration.

```{r}
tbldrug <- read_csv("data/tbldrug.csv")
head(tbldrug)
```

We made sure all patients in the antibiotic data are present in the transplant metadata:

```{r}
# Check if all PatientIDs in tbldrug are present in tblhctmeta
missing_patient_ids <- tbldrug %>%
    filter(!PatientID %in% tblhctmeta$PatientID) %>%
    pull(PatientID) %>%
    unique()

# Output the result
if (length(missing_patient_ids) == 0) {
    message("All PatientIDs in tbldrug are present in tblhctmeta.")
} else {
    message("The following PatientIDs in tbldrug are not present in tblhctmeta: ", paste(missing_patient_ids, collapse = ", "))
}
```

The table includes data for `r tbldrug %>% pull(Category) %>% unique() %>% length()` categories of anti-infectives:

```{r}
tbldrug %>% pull(Category) %>% unique()
```

Here's a table with anti-infective drugs administered to the patients:

```{r}
# Table of unique drugs, their categories, and the number of patients who received them
unique_drugs <- tbldrug %>%
    group_by(Factor, Category) %>%
    summarise(n_patients = n_distinct(PatientID)) %>%
    arrange(desc(n_patients), Category, Factor)

print(unique_drugs, n = 82)
```

Next, we were interested in the timeline of administration of anti-infective drugs. Specifically, we wanted to know if there were time periods relative to the transplant where most patients were under a similar anti-infective drug regime. This could guide the selection of specific time frames where model predicitons of blood stream infections might be more accurate and clinically relevant.

```{r}
# Load RColorBrewer for color palettes
library(RColorBrewer)

# Filter patients with a single HCT
single_hct_patients <- tblhctmeta %>%
        group_by(PatientID) %>%
        filter(n() == 1) %>%
        pull(PatientID)

# Most common drugs for plotting
top_drugs <- tbldrug %>%
    group_by(Category) %>%
    filter(n() > 400) %>%
    pull(Category) %>%
    unique()

# Filter the drug data for these patients
single_hct_drug_data <- tbldrug %>%
        filter(PatientID %in% single_hct_patients & Category %in% top_drugs)

# Filter the data to the specified range
filtered_drug_data_oral <- single_hct_drug_data %>%
        filter(StartDayRelativeToNearestHCT > -30 & StopDayRelativeToNearestHCT < 30 & Route == "oral")

# Filter the data to the specified range
filtered_drug_data_iv <- single_hct_drug_data %>%
        filter(StartDayRelativeToNearestHCT > -30 & StopDayRelativeToNearestHCT < 30 & Route == "intravenous")

# Define a color palette with 21 different colors
color_palette <- brewer.pal(n = 11, name = "Paired")
#if (length(unique(single_hct_drug_data$Category)) > 9) {
#    color_palette <- colorRampPalette(color_palette)(length(unique(single_hct_drug_data$Category)))
#}

# Create a dumbbell plot with each PatientID/Category combination as a different row
drug_timeline_iv <- filtered_drug_data_iv %>%
    ggplot(aes(y = interaction(PatientID, Category), x = StartDayRelativeToNearestHCT, xend = StopDayRelativeToNearestHCT, color = Category)) +
    geom_segment(aes(x = StartDayRelativeToNearestHCT, xend = StopDayRelativeToNearestHCT, y = interaction(PatientID, Category), yend = interaction(PatientID, Category)), linewidth = 0.08) +
    scale_color_manual(values = setNames(color_palette, sort(unique(filtered_drug_data_iv$Category))), breaks = sort(unique(filtered_drug_data_iv$Category), decreasing = TRUE)) +
    labs(title = "Intravenous anti-infective drugs",
        x = "Time Relative to Nearest HCT (days)",
         y = "Patient ID / Drug Category",
         color = "Drug Category") +
    scale_x_continuous(breaks = c(-30, -20, -10, -2, 0, 7, 10, 12, 20, 30)) +
    custom_theme +
    theme(axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          legend.background = element_rect(fill = "transparent"),
          legend.key = element_rect(fill = "transparent"),
          legend.key.size = unit(1.5, "lines")) +
    guides(color = guide_legend(override.aes = list(linewidth = 3))) +
    geom_vline(xintercept = c(-10, -2, 7, 12), linetype = "dashed")

# Create a dumbbell plot with each PatientID/Category combination as a different row
drug_timeline_oral <- filtered_drug_data_oral %>%
    ggplot(aes(y = interaction(PatientID, Category), x = StartDayRelativeToNearestHCT, xend = StopDayRelativeToNearestHCT, color = Category)) +
    geom_segment(aes(x = StartDayRelativeToNearestHCT, xend = StopDayRelativeToNearestHCT, y = interaction(PatientID, Category), yend = interaction(PatientID, Category)), linewidth = 0.08) +
    scale_color_manual(values = setNames(color_palette, sort(unique(filtered_drug_data_iv$Category))), breaks = sort(unique(filtered_drug_data_iv$Category), decreasing = TRUE)) +
    labs(title = "Oral anti-infective drugs",
        x = "Time Relative to Nearest HCT (days)",
         y = "Patient ID / Drug Category",
         color = "Drug Category") +
    scale_x_continuous(breaks = c(-30, -20, -10, -2, 0, 7, 10, 12, 20, 30)) +
    custom_theme +
    theme(axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          legend.background = element_rect(fill = "transparent"),
          legend.key = element_rect(fill = "transparent"),
          legend.key.size = unit(1.5, "lines")) +
    guides(color = guide_legend(override.aes = list(linewidth = 3))) +
    geom_vline(xintercept = c(-10, -2, 7, 12), linetype = "dashed")

#ggsave("plot.pdf")
```

There does seem to be some time frames where the anti-infective drugs administered are highly similar across patients:

```{r}
print(drug_timeline_iv)
print(drug_timeline_oral)
```

### Infections data

Let's now examine the data on infections. This is the table that includes all infections, which is larger than what is available with the SD paper.

```{r}
tblinfections <- read_csv("data/allinfectionsSD.csv")
head(tblinfections)
```

We checked if all patients for which we have infection data are included in the transplant metadata:

```{r}
# Check if all PatientIDs in tblinfections are present in tblhctmeta
missing_patient_ids_infections <- tblinfections %>%
    filter(!PatientID %in% tblhctmeta$PatientID) %>%
    pull(PatientID) %>%
    unique()

# Output the result
if (length(missing_patient_ids_infections) == 0) {
    message("All PatientIDs in tblinfections are present in tblhctmeta.")
} else {
    message("The following PatientIDs in tblinfections are not present in tblhctmeta: ", paste(missing_patient_ids_infections, collapse = ", "))
}
```

So, there are `r length(missing_patient_ids_infections)` patients that are not included. I will exclude them for now.

It also looks like the time of infections in this case is relative to secret reference selected for each patient, so we need to center the infections relative to the transplants:

```{r}
# Function to calculate DayRelativeToNearestHCT for infections data
calculate_day_relative_to_nearest_hct <- function(patient_id, infection_day, hct_meta) {
    patient_hcts <- hct_meta %>%
        filter(PatientID == patient_id) %>%
        pull(TimepointOfTransplant)
    nearest_hct <- patient_hcts[which.min(abs(infection_day - patient_hcts))]
    infection_day - nearest_hct
}

# Filter the infections data to only include patients present in tblhctmeta
filtered_infections <- tblinfections %>%
    filter(PatientID %in% tblhctmeta$PatientID)

# Add the DayRelativeToNearestHCT
filtered_infections <- filtered_infections %>%
    rowwise() %>%
    mutate(DayRelativeToNearestHCT = calculate_day_relative_to_nearest_hct(PatientID, Day, tblhctmeta)) %>%
    ungroup()

    # Show a table with the infection Day, HCT day and DayRelativeToNearestHCT for the first three unique patients
    spot_check_table <- filtered_infections %>%
        filter(PatientID %in% unique(filtered_infections$PatientID)[1:3]) %>%
        #select(PatientID, Day, DayRelativeToNearestHCT) %>%
        left_join(tblhctmeta %>% select(PatientID, TimepointOfTransplant), by = "PatientID") %>%
        arrange(PatientID, Day)

    print(spot_check_table)

```

Here's the frequency of infections caused by each agent:

```{r}
    # Tally the number of infections caused by each InfectiousAgent
    infectiousagent_tally <- filtered_infections %>%
        count(InfectiousAgent) %>%
        arrange(desc(n))
    
    print(infectiousagent_tally, n = 30)
```

Let's look at the timing of the infections by infectious agent:

```{r}
    #hist(filtered_infections$DayRelativeToNearestHCT)

    #filtered_infections %>%
    #filter(DayRelativeToNearestHCT >= -30 & DayRelativeToNearestHCT <= 30) %>%
    #pull(DayRelativeToNearestHCT) %>%
    #hist()

    # Function to create histograms for the top infectious agents
    create_histogram <- function(agent, data) {
        data %>%
            filter(InfectiousAgent == agent) %>%
            ggplot(aes(x = DayRelativeToNearestHCT)) +
            geom_histogram(binwidth = 1, fill = "gray50", color = "black") +
            labs(title = paste("Infections by", agent),
                 x = "Days Relative to Nearest HCT",
                 y = "Frequency") +
            custom_theme
    }

    # Get the top 20 most frequent infectious agents
    top_agents <- infectiousagent_tally %>%
        top_n(20, n) %>%
        pull(InfectiousAgent)

    # Create and print histograms for each of the top 20 infectious agents
    histograms <- lapply(top_agents, create_histogram, data = filtered_infections)
    for (hist in histograms) {
        print(hist)
    }
```

Based on this, we will probably need to trim the infection data. One way is to consider at most 30 days prior to transplant (except if WBC < 0.5 before that) and up to engraftment (see WBC data below
)
***Issues to check***

- Why are some patients for which we have infection data not included in the transplant metadata?
- When an infection starts, do they do blood cultere tests every day? or why are there some cases (e.g., 840) with data for two consecutive days?
    - Yes, they are tested afterwards. Will consider each positive day as an "independent infection".

### White blood cell (WBC) count data

We now explore the WBC count data:

```{r}
# Load the data
tblwbc <- read_csv("data/tblwbc.csv")
head(tblwbc)
```

Let's make sure that all patients in this dataset are included in the transplant metadata:

```{r}
# Check if all PatientIDs in tblwbc are present in tblhctmeta
missing_patient_ids_wbc <- tblwbc %>%
    filter(!PatientID %in% tblhctmeta$PatientID) %>%
    pull(PatientID) %>%
    unique()

# Output the result
if (length(missing_patient_ids_wbc) == 0) {
    message("All PatientIDs in tblwbc are present in tblhctmeta.")
} else {
    message("The following PatientIDs in tblwbc are not present in tblhctmeta: ", paste(missing_patient_ids_wbc, collapse = ", "))
}
```

The table contains counts for WBCtotal, Neutrophils, and Lymphocytes. To summarize this information, I added a Status column with the following values:

- `PreNeutropenia` for the days before the first dip of the WBCtotal below 500 cells/uL.
- `NeutropeniaStart` for the first day where the WBCtotal fell below 500 cells/uL. This cannot be the first day for which the measurement is available for a patient. For patients whose first WBC data point is already below 500 cells/uL, the Status of the first measurement day is `Neutropenia` because we cannot determine when it started.
- `Neutropenia` for the days subsequent to the neutropenia start but before engrafment where WBCtotal was below 500 cells/uL.
- `TransitionToEngrafment` for the first four consecutive days after neutropenia and HCT where the WBCtotal was above 500 cells/uL.
- `Engraftment` for the fourth consecutive day after neutropenia and HCT where the WBCtotal was above 500 cells/uL.
- `PostEngraftment` for all days following engrafment where the WBCtotal was above 500 cells/uL.
- `NeutropeniaPostEngraftment` for all days following engrafment where the WBCtotal was below 500 cells/uL.

For now, the Status column will have NAs for days pre-engrafent where the WBCtotal was above 500 cells/uL for less than four consecutive days. Other cases (e.g., 1671) with NA Status correspond to patients whose first available measurement was consistent with neutropenia. Therefore, the`NeutropeniaStart` cannot be determined and there is no `PreNeutropenia` phase even if the patient had WBCtotal above 500 cells/uL before the HCT. In such days, Status is NA.

Here's an example of the Status scoring for one patient:

```{r}
# Filter the WBC data for patients with a single HCT and WBCtotal as BloodCellType
filtered_wbc_data <- tblwbc %>%
    filter(PatientID %in% single_hct_patients & BloodCellType == "WBCtotal") %>%
    mutate(Value = as.numeric(str_replace(Value, "<0.1", "0.09")))

# Add a Status column to the filtered_wbc_data
engraftment_threshold <- 3
filtered_wbc_status_data <- filtered_wbc_data %>%
    #filter(PatientID == "1001") %>%
    group_by(PatientID) %>%
    arrange(DayRelativeToNearestHCT) %>%
    mutate(
        Status = case_when(
            Value < 0.5 & cumall(lag(Value, default = Inf) >= 0.5) & row_number() > 1 ~ "NeutropeniaStart",
            Value < 0.5 ~ "Neutropenia",
            TRUE ~ NA_character_
        )
    ) %>%
    mutate(
        Status = case_when(
            Value >= 0.5 & (purrr::map_lgl(row_number(), ~ any(Status[(.x + 1):n()] == "NeutropeniaStart")) | all(is.na(Status))) ~ "PreNeutropenia",
            DayRelativeToNearestHCT > 0 & purrr::map_lgl(row_number(), ~ all(Value[max(1, (.x - engraftment_threshold)):.x] >= 0.5)) 
            & lag(Status, (engraftment_threshold + 1), default = NA) %in% c("Neutropenia", "NeutropeniaStart") ~ "Engraftment",
            TRUE ~ Status
        )
    ) %>%
    mutate(
        Status = case_when(
            Value >= 0.5 & purrr::map_lgl(row_number(), ~ any(Status[1:(.x - 1)] == "Engraftment")) ~ "PostEngraftment",
            Status == "Neutropenia" & purrr::map_lgl(row_number(), ~ any(Status[1:(.x - 1)] == "Engraftment")) ~ "NeutropeniaPostEngraftment",
            Value >= 0.5 & purrr::map_lgl(row_number(), ~ any(Status[(.x + 1):(.x + engraftment_threshold)] == "Engraftment")) ~ "TransitionToEngrafment",
            TRUE ~ Status
        )
    ) %>%
    ungroup()

# Print example of Status for patient a single patient (1001)
print(filtered_wbc_status_data %>% filter(PatientID == "1001"), n = 100)
```

Let's visualize the dynamics of these WBCs relative to the transplant timeline:

```{r}
# Create a line plot showing WBCtotal for each patient through time
wbc_plot <- filtered_wbc_data %>%
    ggplot(aes(x = DayRelativeToNearestHCT, y = Value, group = PatientID, color = as.factor(PatientID))) +
    geom_line(alpha = 0.2) +
    labs(title = "WBC Total Dynamics for Single HCT Patients",
         x = "Days Relative to Nearest HCT",
         y = "WBC Total",
         color = "Patient ID") +
    custom_theme +
    theme(legend.position = "none")  # Hide legend for clarity

# Print the plot
print(wbc_plot)
```